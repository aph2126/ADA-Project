source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
ix.train = sample(nrow(X.train), 300)
ix.test = sample(nrow(X.test), 100)
ad.train = ad.train[ix.train,]
ix.train = sample(nrow(ad.train), 300)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
ad.test$TotalConversions
ad.train$TotalConversions
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
ad.train$TotalConversions
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Temporary
ix.train = sample(nrow(ad.train), 600)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Temporary
ix.train = sample(nrow(ad.train), 600)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
# Setup
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
sum(fit.full$fitted.values != ad.train$TotalConversions)
fit.full$fitted.values
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Temporary
ix.train = sample(nrow(ad.train), 1000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
summary(fit.full)
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Temporary
ix.train = sample(nrow(ad.train), 10000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
dim(ad.train)
head(ad.train)
summary(fit.full)
ix.train = sample(nrow(ad.train), 100000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Temporary
ix.train = sample(nrow(ad.train), 100000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
summary(fit.full)
# Preliminaries
rm(list = ls())
path.root = '/Users/howland/Dropbox/ADA Project/'
path.bin = paste(path.root, 'andrew/bin/', sep = "")
path.output = paste(path.root, 'andrew/output/', sep = "")
path.data1 = paste(path.root, 'andrew/data/', sep = "")
path.data2 = paste(path.root, 'data/', sep = "")
# Calling data
setwd(path.data2)
data = read.csv("cleanWide_v4.csv")
# Other
data$TotalConversions = as.numeric(data$TotalRevenue > 0)           # TotalConversions variable
data = unique(data)                                                 # Removing duplicate rows
# Removing columns
rm.1 = c("Date", "Country", "ZIP", "City", "DMA")                   # Variables that are unrelated to conversions
rm.2 = c("TotalRevenue","Activity", "ActivityID")                   # Variables are identical to conversions
rm.3 = c("OperatingSystemVersion", "ConnectionType",
"MobileCarrier", "ChannelMix", "HoursSinceAttributedAction") # Variables that are largely missing, or only have a single value
ix.remove = is.element(names(data), c(rm.1, rm.2, rm.3))
ad = data[,!ix.remove]
# Removing extraneous variables related to last 5 interactions
vars.remove = c("CreativeGroups1", "CreativeGroups2", "PaidSearchAdGroup", "PaidSearchAdvertiser",
"PaidSearchCampaign", "Strategy", "InteractionNumber", "InteractionDateTime",
"Ad", "Placement", "Creative", "PaidSearchKeyword")
for (i in 1:length(vars.remove)) {
vars.i = c(vars.remove[i], paste(vars.remove[i],"_",2:5, sep = ""))
ix.vars = is.element(names(ad), vars.i)
ad = ad[,!ix.vars]
}
# Collapsing variables related to last 5 interactions
vars = c("Campaign", "Site", "CreativeType", "Target", "Category", "AdSize")
names = c("Camp", "Site", "CType", "Targ", "Cat", "Size")
new.vars = matrix(NA, dim(ad)[1],0)
new.names = array(NA,0)
levels.all = list(length(vars))
for (i in 1:length(vars)) {
# Identifying set of unique values for each variable
vars.i = c(vars[i], paste(vars[i],"_",2:5, sep = ""))
ix.vars = is.element(names(ad), vars.i)
levels = array(NA,0)
for (j in 1:sum(ix.vars)) {
levels = c(levels, levels(ad[,ix.vars][,j]))
}
levels = unique(levels)
levels = matrix(levels[levels != ""])
colnames(levels) = vars[i]
levels.all[[i]] = levels
# For each level of each variable, creating occurance counts
for (j in 1:length(levels)) {
name.i = paste("n", names[i],"_", j, sep = "")
new.vars = cbind(new.vars, apply(ad, 1, function(x) sum(is.element(t(x[ix.vars]), levels[j]))))
new.names = c(new.names, name.i)
}
# Removing original variables
ad = ad[,!ix.vars]
}
# Cleaning up new variable names, adding in new data
new.names = gsub("-", "", new.names)
new.names = gsub(" ", "", new.names)
colnames(new.vars) = new.names
ad = cbind(ad, new.vars)
# Converting time variables (but removing them, for analysis)
convert.time = c("ActivityDateTime")
ix.convert = is.element(names(ad), convert.time)
ad$ActivityDateTime = as.POSIXct(ad$ActivityDateTime)
ix = (names(ad) == "ActivityDateTime")
ix
ad = ad[,!ix]
names(ad)
ix = unique(ad$ConversionID)
length(ix)
dim(ad)
ix[1:10]
rm.2 = c("TotalRevenue","Activity", "ActivityID","ConversionID")    # Variables are identical to conversions
ix.remove = is.element(names(ad), c(rm.1, rm.2, rm.3))
ix.remove
ad = ad[,!ix.remove]
names(ad)
setwd(path.data1)
save(ad,levels.all, file="ad_wide.Rda")
dim(ad)
names(ad)
97 - 18
# Preliminaries
rm(list = ls())
path.root = '/Users/howland/Dropbox/ADA Project/'
path.bin = paste(path.root, 'andrew/bin/', sep = "")
path.output = paste(path.root, 'andrew/output/', sep = "")
path.data1 = paste(path.root, 'andrew/data/', sep = "")
path.data2 = paste(path.root, 'data/', sep = "")
# Calling data
setwd(path.data2)
data = read.csv("cleanWide_v4.csv")
rm(list = ls())
path.root = '/Users/howland/Dropbox/ADA Project/'
path.bin = paste(path.root, 'andrew/bin/', sep = "")
path.output = paste(path.root, 'andrew/output/', sep = "")
path.data1 = paste(path.root, 'andrew/data/', sep = "")
path.data2 = paste(path.root, 'data/', sep = "")
# Calling data
setwd(path.data2)
data = read.csv("cleanWide_v5.csv")
names(data)
# Other
data$TotalConversions = as.numeric(data$TotalRevenue > 0)           # TotalConversions variable
data = unique(data)                                                 # Removing duplicate rows
# Removing columns
rm.1 = c("Date", "Country", "ZIP", "City", "DMA")                   # Variables that are unrelated to conversions
rm.2 = c("TotalRevenue","Activity", "ActivityID","ConversionID")    # Variables are identical to conversions
rm.3 = c("OperatingSystemVersion", "ConnectionType",
"MobileCarrier", "ChannelMix", "HoursSinceAttributedAction") # Variables that are largely missing, or only have a single value
ix.remove = is.element(names(data), c(rm.1, rm.2, rm.3))
ad = data[,!ix.remove]
# Removing extraneous variables related to last 5 interactions
vars.remove = c("CreativeGroups1", "CreativeGroups2", "PaidSearchAdGroup", "PaidSearchAdvertiser",
"PaidSearchCampaign", "Strategy", "InteractionNumber", "InteractionDateTime",
"Ad", "Placement", "Creative", "PaidSearchKeyword")
for (i in 1:length(vars.remove)) {
vars.i = c(vars.remove[i], paste(vars.remove[i],"_",2:5, sep = ""))
ix.vars = is.element(names(ad), vars.i)
ad = ad[,!ix.vars]
}
names(ad)
# Removing columns
rm.1 = c("Date", "Country", "ZIP", "City", "DMA")                   # Variables that are unrelated to conversions
rm.2 = c("TotalRevenue","Activity", "ActivityID","ConversionID")    # Variables are identical to conversions
rm.3 = c("OperatingSystemVersion", "ConnectionType","Row"
"MobileCarrier", "ChannelMix", "HoursSinceAttributedAction") # Variables that are largely missing, or only have a single value
ix.remove = is.element(names(data), c(rm.1, rm.2, rm.3))
ad = data[,!ix.remove]
# Removing extraneous variables related to last 5 interactions
vars.remove = c("CreativeGroups1", "CreativeGroups2", "PaidSearchAdGroup", "PaidSearchAdvertiser",
"PaidSearchCampaign", "Strategy", "InteractionNumber", "InteractionDateTime",
"Ad", "Placement", "Creative", "PaidSearchKeyword")
for (i in 1:length(vars.remove)) {
vars.i = c(vars.remove[i], paste(vars.remove[i],"_",2:5, sep = ""))
ix.vars = is.element(names(ad), vars.i)
ad = ad[,!ix.vars]
}
names(ad)
rm.1 = c("Date", "Country", "ZIP", "City", "DMA")                   # Variables that are unrelated to conversions
rm.2 = c("TotalRevenue","Activity", "ActivityID","ConversionID")    # Variables are identical to conversions
rm.3 = c("OperatingSystemVersion", "ConnectionType","Row",
"MobileCarrier", "ChannelMix", "HoursSinceAttributedAction") # Variables that are largely missing, or only have a single value
ix.remove = is.element(names(data), c(rm.1, rm.2, rm.3))
ad = data[,!ix.remove]
# Removing extraneous variables related to last 5 interactions
vars.remove = c("CreativeGroups1", "CreativeGroups2", "PaidSearchAdGroup", "PaidSearchAdvertiser",
"PaidSearchCampaign", "Strategy", "InteractionNumber", "InteractionDateTime",
"Ad", "Placement", "Creative", "PaidSearchKeyword")
for (i in 1:length(vars.remove)) {
vars.i = c(vars.remove[i], paste(vars.remove[i],"_",2:5, sep = ""))
ix.vars = is.element(names(ad), vars.i)
ad = ad[,!ix.vars]
}
names(ad)
# Collapsing variables related to last 5 interactions
vars = c("Campaign", "Site", "CreativeType", "Target", "Category", "AdSize")
names = c("Camp", "Site", "CType", "Targ", "Cat", "Size")
new.vars = matrix(NA, dim(ad)[1],0)
new.names = array(NA,0)
levels.all = list(length(vars))
for (i in 1:length(vars)) {
# Identifying set of unique values for each variable
vars.i = c(vars[i], paste(vars[i],"_",2:5, sep = ""))
ix.vars = is.element(names(ad), vars.i)
levels = array(NA,0)
for (j in 1:sum(ix.vars)) {
levels = c(levels, levels(ad[,ix.vars][,j]))
}
levels = unique(levels)
levels = matrix(levels[levels != ""])
colnames(levels) = vars[i]
levels.all[[i]] = levels
# For each level of each variable, creating occurance counts
for (j in 1:length(levels)) {
name.i = paste("n", names[i],"_", j, sep = "")
new.vars = cbind(new.vars, apply(ad, 1, function(x) sum(is.element(t(x[ix.vars]), levels[j]))))
new.names = c(new.names, name.i)
}
# Removing original variables
ad = ad[,!ix.vars]
}
# Cleaning up new variable names, adding in new data
new.names = gsub("-", "", new.names)
new.names = gsub(" ", "", new.names)
colnames(new.vars) = new.names
ad = cbind(ad, new.vars)
# Converting time variables (but removing them, for analysis)
convert.time = c("ActivityDateTime")
ix.convert = is.element(names(ad), convert.time)
ad$ActivityDateTime = as.POSIXct(ad$ActivityDateTime)
ix = (names(ad) == "ActivityDateTime")
ad = ad[,!ix]
dim(ad)
names(ad)
setwd(path.data1)
save(ad,levels.all, file="ad_wide.Rda")
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Temporary
ix.train = sample(nrow(ad.train), 100000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
# Setup
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
summary(fit.full)
ix.train = sample(nrow(ad.train), 1000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
# Setup
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
ix.train = sample(nrow(ad.train), 10000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
# Setup
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
ix.train = sample(nrow(ad.train), 10000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
dim(ad.test)
dim(ad.train)
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Temporary
ix.train = sample(nrow(ad.train), 10000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
ix.train = sample(nrow(ad.train), 100000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
# Setup
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
names(ad.train)
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
ix.train = sample(nrow(ad.train), 100000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
# Setup
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
ix.train = sample(nrow(ad.train), 1000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
# Setup
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
# Forward Addition
fit.fwd = step (fit.null, list(lower = fit.null, upper = fit.full), direction = "forward")
vars.fwd = as.character(attr(fit.fwd$terms,'variables'))[-1]
ix = is.element(names(ad.train), vars.fwd)
warnings()
fit.fwd.select = glm(TotalConversions ~ . , data = ad.train[,ix], family = "binomial")
fit.fwd.select
summary(fit.fwd.select)
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Temporary
ix.train = sample(nrow(ad.train), 50000)
ix.test = sample(nrow(ad.test), 100)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
# Setup
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
summary(fit.full)
yhat.train = predict(fit.full, type = "response")
yhat.train
yhat.test = predict(fit.full, type = "response", newdata = ad.test)
yhat.test
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Temporary
ix.train = sample(nrow(ad.train), 50000)
ix.test = sample(nrow(ad.test), 10000)
ad.train = ad.train[ix.train,]
ad.test = ad.test[ix.test,]
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
yhat.train = predict(fit.full, type = "response")
yhat.test = predict(fit.full, type = "response", newdata = ad.test)
####################
# Stepwise Regression
####################
# Preliminaries
rm(list = ls())
#setwd('/home/ubuntu/andrew/bin/')
setwd('/Users/howland/Dropbox/ADA Project/andrew/bin')
source("prelim.R")
data = prelim(server = 0, pct.test = .3, seed = 1, reduce_States = 1)
for (i in 1:length(names(data))) {
assign(names(data)[i], data[[names(data)[i]]])
}
# Setup
library(leaps)
fit.null = glm(TotalConversions ~ 1, data = ad.train, family = "binomial")
fit.full = glm(TotalConversions ~ ., data = ad.train, family = "binomial")
# Forward Addition
fit.fwd = step (fit.null, list(lower = fit.null, upper = fit.full), direction = "forward")
vars.fwd = as.character(attr(fit.fwd$terms,'variables'))[-1]
ix = is.element(names(ad.train), vars.fwd)
fit.fwd.select = glm(TotalConversions ~ . , data = ad.train[,ix], family = "binomial")
yhat.train = predict(fit.fwd.select, type = "response")
yhat.test = predict(fit.fwd.select, type = "response", newdata = ad.test)
# Saving results
setwd(path.output)
save(yhat.train, yhat.test,file = "yhat_Sfwd.Rda")
save(fit.fwd.select, file = "fit_Sfwd.Rda")
yhat.sFWD.train = predict(fit.fwd.select, type = "response")
yhat.sFWD.test = predict(fit.fwd.select, type = "response", newdata = ad.test)
length(yhat.sFWD.test)
length(yhat.sFWD.train)
yhat.sFWD.test[1:10]
setwd(path.output)
save(yhat.sFWD.train, yhat.sFWD.test,file = "yhat_sFWD.Rda")
save(fit.fwd.select, file = "fit_sFWD.Rda")
path.output
setwd(path.output)
save(yhat.sFWD.train, yhat.sFWD.test,file = "yhat_sFWD.Rda")
save(fit.fwd.select, file = "fit_sFWD.Rda")
